1. 자바 프로그램 개발 기본 단위
    1. class 라는 형식으로 개발
    2. 확장자
        = *.java

2. 실행을 위한 단계
    개발 -> 컴파일 : *.java 소스를 기계어 코드인 byte 코드로 변경(*.class)
    -> 실행 : *.class라는 파일

    참고
        구글이라 가정
            - 서버는 늘 24시간 실행중이어야 가능함.
                - java로 구현되어 있을 경우 server의 실행파일은 *.class로 구성

            - 검색어 입력하는 화면 : html / css / java script로 개발
            - 검색어 입력후에 버튼 클릭해서 요청 : server의 프로그램이 데이터 받아서 검색 실행
                java or c# or python 등으로 개발

3. class 문법
    데이터와 기능(crud)으로 구성
        클래스 관점
            데이터 - 변수
            기능 - 메소드

4. 변수(*중요)
    - 데이터를 표현하는 요소
    - java는 python과 달리 데이터 타입을 명시해서 변수 선언
        python 과 java script
         - 타입 선언 없이 변수명만 선언
         - 변수 타입이 동적. 타입은 값 대입시 결정
            name = 10
            name = "길" --> 허용
        java
            String name = "길";
            name = 10; --> 에러발생

    1. 타입에 따른 구분
        - 기본 타입 8가지를 제외한 모든 타입은 예외없이 참조타입
        - java에서 사용가능한 데이터 타입의 개수는 제한이 없음(class, method 등등 포함)
        1. 참조 타입(class 타입, 객체 타입, reference 타입)
            사용자 정의 타입 & 제공받은 class를 기반으로 하는 타입
            사용자 정의(java를 사용하는 개발자들이 직접 개발하는 타입. ex)String(API))

        2. 기본타입
            문자/숫자(정수, 실수)/논리
            정수 : byte(8bit)/short(16)/int(32)/long(64)
            실수 : float(32bit)/double(64)
            논리 : boolean
            문자 : char

            java에서 이미 정해진 타입

    2. 선언 위치에 따른 종류 구분
        1. 멤버 변수
            - 객체라는 것을 생성시 객체별로 별도로 생성되는 변수들
            - 선언 위치
                : class {} 바로 내부에 선언
        2. 로컬 변수
            - 메소드 내부에 선언되는 변수
            - 객체 생성과 무관하게 메소드가 호출시에만 생성되었다 메소드 실행 종료시 자동 소멸

5. 연산자
    1. = : 값을 오른쪽에서 왼쪽으로 입력하는 연산자
    2. + : 숫자끼리의 더하기
           NaN의 값이 포함된 경우 앞뒤 데이터의 결합 연산자
    3. . : dot 연산자
        접근자

6. 객체지향 프로그램 특징
    - 주요 : 데이터 관리를 최적의 구조로 하기 위한 메커니즘
            재사용성 고려(비용 절감)
            객체 하나만 제대로 만들면 다수의 정보 관리 문제 없음.
            각 데이터간의 연관성을 파악하는 것이 중요
    - java의 경우(생성자 : 객체의 초기화를 담당. 멤버 변수 초기화 등등)
        - 개발자가 타이핑을 하지 않아도 모든 class에 객체 생성 가능하게 생성자 자동 지원
        - 개발자가 직접 타이핑도 가능
        - class 명과 동일함

    - python인 경우
        - __init__(self):

* 필수 용어
    1. crud
        - create / read / update / delete
        - SQL(DB와 소통하는 언어)
            - DB : database(excel의 2차원 table 구조와 흡사)

    2. app들의 주 목적
        - data crud

    3. 기능 구현하는 프로그램 단위
        - 함수 또는 method

        - class와 무관하게 기능을 독립적으로 개발 가능한 구성
            - 함수
                - C와 java script와 python은 기능만 독립적으로 개발 가능
                    - print(), str(), int(), ...
                    - def 함수명():
                        로직

            - class 내부에만 구현되어야 하는 기능
                - method
                - java는 method만 존재
                - .split(), .append(), ...

            - python과 java script는 class 단위로도 개발