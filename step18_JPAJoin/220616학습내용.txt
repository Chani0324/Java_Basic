실습 단계별 정리


1. 실습


1-1. 정상 실행
	- table 생성 및 데이터 저장 성공
	
	public void step01() {
		
		EntityManager em = PublicCommon.getEntityManager();
		EntityTransaction tx = em.getTransaction();
		tx.begin();

		Team t1 = Team.builder().teamName("농구팀").build();
		
		Member m1 = Member.builder().name("주엽").age(10).teamId(t1).build();
		Member m2 = Member.builder().name("태균").age(20).teamId(t1).build();
				
		em.persist(t1);			
		em.persist(m1); 		
		em.persist(m2); 
		
		tx.commit();
	}
	
1-2. 단위 test시 NullPointerException 예외 발생
	- 컴파일 정상. 실행시 문제 발생
	java.lang.NullPointerException: Cannot invoke "java.util.List.add(Object)" because the return value of "model.domain.entity.Team.getMembers()" is null
	at running.test.RunningTest.step01(RunningTest.java:27)
	..
		
	public void step01() {
		
		EntityManager em = PublicCommon.getEntityManager();
		EntityTransaction tx = em.getTransaction();
		tx.begin();

		Team t1 = Team.builder().teamName("농구팀").build();
		
		Member m1 = Member.builder().name("주엽").age(10).teamId(t1).build();
		Member m2 = Member.builder().name("태균").age(20).teamId(t1).build();
				
		t1.getMembers().add(m1);   // 포함으로 인한 오류
		t1.getMembers().add(m2);
		
		em.persist(t1);			
		em.persist(m1); 		
		em.persist(m2); 
		
		tx.commit();
	}	
	
	
1-3. 1-2.에서 실행된 문제 해결
	단, 	t1.getMembers().add(m1);  
	t1.getMembers().add(m2); 삭제 금지
	
	추가 학습된 내용
	builder pattern으로 객체 생성시에는 명시적으로 초기화한 멤버 변수값 이외에는 모두다 기본 값으로 자동 초기화
	
	예시 구현 및 호출 실행 결과
	@Builder
	public class Team {
		private long teamId; 
		private String teamName;
		private List<Member> members = new ArrayList<>();
		private String name = "김혜경";
		private int no = 100;
	}
		
	@Test
	public void test() {
		
		Team t1 = Team.builder().teamName("농구팀").members(new ArrayList<Member>()).build();
		System.out.println(t1); //Team [teamId=0, teamName=농구팀, members=[]]
		
		Team t2 = Team.builder().teamName("농구팀").build();
		System.out.println(t2);  //Team [teamId=0, teamName=농구팀, members=null]
		System.out.println(t2.getTeamId());  //0 
		System.out.println(t2.getMembers()); //null
		System.out.println(t2.getTeamName()); //농구팀
		System.out.println(t2.getName()); //null
		System.out.println(t2.getNo()); //0
	}
		
	
	
	
** step03()
- jpa dml에 한해서는 commit / rollback

1-4. 검색 즉 find()로 인해 select 문장 실행 여부 확인
	Team t3 = em.find(Team.class, t1.getTeamId());
	
	1-4-1. 정상 멤버수 검색
		- em.flush()와  em.clear() 없는 경우
		- 실행된 sql문장 확인
		drop -> create -> insert 
		멤버수 검색 성공
		
		
	1-4-2. 정상 멤버수 검색
		- em.flush()와  em.clear() 있는 경우
		- 실행된 sql문장 확인
		drop -> create -> select -> insert  
		멤버수 검색 성공	 	
	
		
	@Test
	public void step03() {		
		EntityManager em = PublicCommon.getEntityManager();
		EntityTransaction tx = em.getTransaction();
		tx.begin();

		Team t1 = Team.builder().teamName("농구팀").members(new ArrayList<Member>()).build();
		
		Member m1 = Member.builder().name("주엽").age(10).teamId(t1).build();
		Member m2 = Member.builder().name("태균").age(20).teamId(t1).build();
				
		t1.getMembers().add(m1);
		t1.getMembers().add(m2);
		
		em.persist(t1);			
		em.persist(m1); 		
		em.persist(m2); 
		
		em.flush();
		em.clear();
		
		Team t3 = em.find(Team.class, t1.getTeamId());
		System.out.println("팀에 소속된 멤버 수 : " + t3.getMembersCount());	 //팀에 소속된 멤버 수 : 2
		
		tx.commit();
	}
		
	- 이론 정리
		1. jpa db들만의 고유한 특징이 아닌 표준화 우선
		2. dml인 경우 commit()/rollback() 무조건 필수
		3. jpa 구조는
			db에 commit()으로 영구 적용전 Persistence Context(임시 메모리)에서 작업 수행 후 
			commit()으로 db에 실제 영구적인 적용
			
		4. 개발자 및 관리자 관점
			- 시스템 절약 방식 및 코드, API 고민 
			- db 시스템 다운 안 되게 설계
			...
	
		5. select 실행의 의미
			- db에 직접 검색을 수행하는 것을 의미 

		6. 	em.flush() & em.clear()		
			- Persistence Context(임시 메모리) 청소
			- flush() : 잔존 데이터가 있다면 db로 전송 의미
			- clear() : 청소
	
		7. persistence Context(임시 메모리) 청소된 직후에 검색을 할 경우
		잔존 근거 데이터가 없기 때문에 db에 select 필수
		
		8. persistence Context(임시 메모리)에 entity 정보가 있다면 db까지 select 할 필요가 없.다..!!
		
		
	
** step04()
	- 코드 개선 및 실행의 안정성

1. 검색시 주의 사항
	1. id 즉 pk의 데이터 타입이 long인 경우 find( , long값)
		- l, L  값 표현	
	
2. 실행시 문제가 발생
	- 컴파일 오류업이 실제 실행시 예외 발생
	- 해결점
		try~catch(Exception 변수) 처리 및 예외 확인

3. 필수 권장 구조
	- finally 블록 내부에 em.close() 필수	
	

** step05
	- Member의 이름과 소속된 팀 정보 검색
	
1-1. 실행 코드	
	Team t3 = em.find(Team.class, t1.getTeamId());
	
	Member m3 = em.find(Member.class, 1L);
	System.out.println("멤버 이름 - " + m3.getName()); //멤버 이름 - 주엽
	System.out.println("멤버가 소속된 팀 정보 - " + m3.getTeamId().getTeamName()); //멤버가 소속된 팀 정보 - 농구팀


1-2. 실행된 sql문장
	drop -> create -> insert -> select
	select
	        team0_.team_id as team_id1_1_0_,
	        team0_.team_name as team_nam2_1_0_ 
	    from
	        Team team0_ 
	    where
	        team0_.team_id=?
	        
	
	select
	    members0_.team_id as team_id4_0_0_,
	    members0_.member_id as member_i1_0_0_,
	    members0_.member_id as member_i1_0_1_,
	    members0_.age as age2_0_1_,
	    members0_.name as name3_0_1_,
	    members0_.team_id as team_id4_0_1_ 
	from
	    Member members0_ 
	where
	    members0_.team_id=?
			


2-1. 실행코드
	Team t3 = em.find(Team.class, t1.getTeamId());


2-2. 실행된 sql문장
    select
        team0_.team_id as team_id1_1_0_,
        team0_.team_name as team_nam2_1_0_ 
    from
        Team team0_ 
    where
        team0_.team_id=?


	select
        members0_.team_id as team_id4_0_0_,
        members0_.member_id as member_i1_0_0_,
        members0_.member_id as member_i1_0_1_,
        members0_.age as age2_0_1_,
        members0_.name as name3_0_1_,
        members0_.team_id as team_id4_0_1_ 
    from
        Member members0_ 
    where
        members0_.team_id=?



** step06
- Team 검색 없이 member만 검색시 member table의 team_id 컬럼값이 참조하는 team table의 team정보까지join 문장으로 자동 검색

1-1. 실행 검색 코드
		Member m3 = em.find(Member.class, 1L);

1-2. 실행된 sql
   select
        member0_.member_id as member_i1_0_0_,
        member0_.age as age2_0_0_,
        member0_.name as name3_0_0_,
        member0_.team_id as team_id4_0_0_,
        team1_.team_id as team_id1_1_1_,
        team1_.team_name as team_nam2_1_1_ 
    from
        Member member0_ 
    	left outer join
        	Team team1_ 
        on member0_.team_id=team1_.team_id 
    where
        member0_.member_id=?



** step07
	- 지연 로딩 test
		1. 의미 : 코드상에서 실제 특정 table의 data가 필요한 시점이 되어서만 select 수행
		2. 설정하는 방식
			- Member.java
				@ManyToOne(fetch = FetchType.LAZY)
				@JoinColumn(name="team_id") 
				private Team teamId;
				
			- Member 클래스의 Team 멤버 변수에 지연설정 해 놓은 상황
			즉 해당 Team 정보가 필요한 시점에만 직접 team table select 하란 의미 
		
1-1. 지연로딩 설정이 없는 설정의 코드
 	@ManyToOne


1-2. 지연로딩 설정이 없는 경우의 select문
	- Member m3 = em.find(Member.class, 1L); 코드로 생성된 select (join 자동 적용)
	
		select
	        member0_.member_id as member_i1_0_0_,
	        member0_.age as age2_0_0_,
	        member0_.name as name3_0_0_,
	        member0_.team_id as team_id4_0_0_,
	        team1_.team_id as team_id1_1_1_,
	        team1_.team_name as team_nam2_1_1_ 
	    from
	        Member member0_ 
	    left outer join
	        Team team1_ 
	            on member0_.team_id=team1_.team_id 
	    where
	        member0_.member_id=?
		
		

2-1. 지연로딩 설정
	@ManyToOne(fetch = FetchType.LAZY)

2-2. 지연로딩 설정으로 실행된 sql문장	
	- Member m3 = em.find(Member.class, 1L); 코드로 생성된 select 

		select
	        member0_.member_id as member_i1_0_0_,
	        member0_.age as age2_0_0_,
	        member0_.name as name3_0_0_,
	        member0_.team_id as team_id4_0_0_ 
	    from
	        Member member0_ 
	    where
	        member0_.member_id=?
        
        
	- m3.getTeamId().getTeamName()  코드로 생성된 select   
        
	    select
	        team0_.team_id as team_id1_1_0_,
	        team0_.team_name as team_nam2_1_0_ 
	    from
	        Team team0_ 
	    where
	        team0_.team_id=?   
        
        
========== RunningTest2JPQL============
1-1. jpql 구성
	List<Member> datas = em.createQuery("select m from Member m where m.teamId=1", Member.class).getResultList();
1-2. 자동 생성된 sql 문장
    select
        member0_.member_id as member_i1_0_,
        member0_.age as age2_0_,
        member0_.name as name3_0_,
        member0_.team_id as team_id4_0_ 
    from
        Member member0_ 
    inner join
        Team team1_ 
            on member0_.team_id=team1_.team_id 
    where
        team1_.team_id=1

2-1. JPQL - inner join 문장 생성
	List<Member> datas = em.createQuery(
			"select m from Member m join m.teamId t where t.teamId =1L", Member.class
	).getResultList();
2-2. 자동생성된 sql 문장
    select
        member0_.member_id as member_i1_0_,
        member0_.age as age2_0_,
        member0_.name as name3_0_,
        member0_.team_id as team_id4_0_ 
    from Member member0_ 
    inner join Team team1_ 
    on member0_.team_id=team1_.team_id 
    where team1_.team_id=1

			